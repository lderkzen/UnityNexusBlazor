@using Modal = Blazorise.Modal
@inject NavigationManager NavigationManager
@inject ICookiePolicyService CookiePolicyService

@if (_requiresCookieConsent)
{
    <Modal @ref="_cookieConsentDialog" Closed="@SetConsentCookieAsync">
        <ModalContent Centered="true">
            <ModalHeader>
                @if (ShowDetails)
                {
                    <ModalTitle>Cookie Policy of @NavigationManager.GetHostName()</ModalTitle>
                    <CloseButton Clicked="@(() => ShowDetails = false)" />
                }
                else
                {
                    <ModalTitle>Cookie Notice</ModalTitle>
                    <CloseButton Clicked="@(() => _cookieConsentDialog?.Hide())" />
                }
            </ModalHeader>
            <ModalBody>
                @if (ShowDetails)
                {
                    <p>
                        Cookies consist of portions of code installed in the browser that assist the Owner in providing the
                        Service according to the purposes described.
                        Some of the purposes for which Cookies are installed may also require the User's consent.
                    </p>
                    <p>
                        Where the installation of Cookies is based on consent, such consent can be freely withdrawn at any time
                        following the instructions provided in this document.
                    </p>

                    <h3>
                        Technical Cookies
                    </h3>
                    <h4>
                        Activity strictly necessary for the functioning of the Service
                    </h4>
                    <p>
                        This Application uses Cookies to save the User's session.
                    </p>

                    <h3>
                        Other types of Cookies or third parties that install Cookies
                    </h3>
                    <p>
                        If any third party operated services are listed among the tools below, these may be used to provide
                        additional services.
                        Please refer to the privacy policy of the listed services for detailed information.
                    </p>
                    <h4>
                        Interaction with external social networks and platforms
                    </h4>
                    <p>
                        This type of service allows interaction with social networks or other external platforms directly from
                        the pages of this Application.<br />
                        The interaction and information obtained through this Application are always subject to the User’s
                        privacy settings for each social network.<br />
                        This type of service might still collect traffic data for the pages where the service is installed, even
                        when Users do not use it.<br />
                        It is recommended to log out from the respective services in order to make sure that the processed data
                        on this Application isn’t being connected back to the User’s profile.<br />
                    </p>
                    <h5>
                        Discord (Discord, Inc.)
                    </h5>
                    <p>
                        The Discord login service is used to authenticate users, and allowing interaction with the Discord
                        network provided by Discord, Inc.
                    </p>
                    <p>
                        Personal data collected: Authentication cookies, unique identifier.
                    </p>
                    <p>
                        Place of processing: Unites States of America - <a href="https://discordapp.com/privacy">Privacy
                            Policy</a>
                    </p>

                    <h3>
                        How to provide or withdraw consent to the installation of Cookies
                    </h3>
                    <p>
                        In addition to what is specified in this document, the User can manage preferences for Cookies directly
                        from within their own browser
                        and prevent – for example – third parties from installing Cookies.
                        Through browser preferences, it is also possible to delete Cookies installed in the past,
                        including the Cookies that may have saved the initial consent for the installation of Cookies by this
                        website.
                        Users can, for example, find information about how to manage Cookies in the most commonly used browsers
                        at the following addresses:
                        <a href="https://support.google.com/chrome/answer/95647?hl=en&p=cpn_cookies">Google Chrome</a>,
                        <a href="https://support.mozilla.org/en-US/kb/enable-and-disable-cookies-website-preferences">Mozilla
                            Firefox</a>,
                        <a href="https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac">Apple
                            Safari</a> and
                        <a href="https://support.microsoft.com/en-us/help/4027947/windows-delete-cookies">Microsoft Edge</a>.
                    </p>
                    <p>
                        With regard to Cookies installed by third parties,
                        Users can manage their preferences and withdrawal of their consent by clicking the related opt-out link
                        (if provided),
                        by using the means provided in the third party's privacy policy, or by contacting the third party.
                    </p>
                }
                else
                {
                    <p>
                        This website or its third-party tools use cookies,
                        which are necessary for its functioning and required to achieve
                        the purpose illustrated in the cookie policy.
                    </p>
                    <p>
                        You accept the use of cookies by closing or dismissing this notice. Read the full <a
                            href="/privacy/?ncc=true" target="_blank" rel="noopener noreferrer">privacy policy here</a>.
                    </p>
                }
            </ModalBody>
            <ModalFooter>
                @if (ShowDetails)
                {
                    <Button Color="Color.Info" Clicked="@(() => ShowDetails = false)">
                        Close
                    </Button>
                }
                else
                {
                    <Button Color="Color.Light" Clicked="@(() => ShowDetails = true)">
                        Learn more
                    </Button>
                    <Button Color="Color.Info" Clicked="@(() => _cookieConsentDialog?.Hide())">
                        Accept
                    </Button>
                }
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    private Modal? _cookieConsentDialog;

    private bool _requiresCookieConsent;
    private bool _showDetails;

    private bool ShowDetails
    {
        get => _showDetails;
        set
        {
            if (value == _showDetails) return;
            _showDetails = value;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckIfCookieConsentIsRequired();
    }

    private async Task CheckIfCookieConsentIsRequired()
    {
        var query = new Uri(NavigationManager.Uri).Query;
        var queryParameters = HttpUtility.ParseQueryString(query);
        var noCookieConsent = queryParameters.AllKeys.Any(m => m == "ncc");
        var checkForCookieConsent = !noCookieConsent;

        _requiresCookieConsent = checkForCookieConsent && await CookiePolicyService.CheckIfCookieConsentIsRequiredAsync();
        StateHasChanged();
        _cookieConsentDialog?.Show();
    }

    private async Task SetConsentCookieAsync()
    {
        await CookiePolicyService.SetConsentCookieAsync();
        _requiresCookieConsent = await CookiePolicyService.CheckIfCookieConsentIsRequiredAsync();
        StateHasChanged();
    }
}
